# –í—ã–±–æ—Ä–∫–∞, –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã

import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import numpy as np
import pandas as pd

np.random.seed(1234)
# –¥–≤–∞ –Ω–∞—à–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –æ–±—ã—á–Ω–æ –∫ –Ω–∏–º —É –Ω–∞—Å –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –±—ã–≤–∞–µ—Ç)
# 1 - –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º.
norm_rv1 = stats.norm(loc=35, scale = 10)
# scale - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
# loc - —Å—Ä–µ–¥–Ω–µ–µ

#–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–ª–µ–Ω–∏—è norm_rv1
gen_pop = norm_rv1.rvs(size=10000)

fig = plt.figure(figsize=(14, 7))
ax1 = plt.subplot(111)
plt.hist(gen_pop, 50, alpha=0.5)
plt.show()

# 2 - –ü—Ä–∏–º–µ—Ä —Å –ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–ª–µ–Ω–∏–µ–º.
ln_distrib = stats.lognorm(0.5, loc = 25, scale = 10)
gen_pop_ln = ln_distrib.rvs(size=10000)

fig = plt.figure(figsize=(14, 7))
ax1 = plt.subplot(111)
plt.hist(gen_pop_ln, 100, alpha=0.5)
plt.show()

#–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# –ú–µ—Ä—ã –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏:
# –ú–µ–¥–∏–∞–Ω–∞ ‚Äî —ç—Ç–æ —Ç–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–∫–∏, —á—Ç–æ —Ä–æ–≤–Ω–æ –ø–æ–ª–æ–≤–∏–Ω–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–≥–æ,
# –∞ –¥—Ä—É–≥–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –º–µ–Ω—å—à–µ –Ω–µ–≥–æ.
median = np.median(gen_pop)
median_ln = np.median(gen_pop_ln)

fig = plt.figure(figsize=(20, 10))
ax1 = plt.subplot(111)
plt.hist(gen_pop, 50, alpha=0.8)
line1 = plt.axvline(median, label=('–ú–µ–¥–∏–∞–Ω–∞ = '+ str(round(median, 1))),
                    color='blue', linestyle='dashed', linewidth=3.5)

ax1.legend(handles=[line1], fontsize = 20)
plt.show()


fig = plt.figure(figsize=(20, 10))
ax1 = plt.subplot(111)
plt.hist(gen_pop_ln, 50, alpha=0.8)
line1 = plt.axvline(median_ln, label=('–ú–µ–¥–∏–∞–Ω–∞ = '+ str(round(median_ln, 1))),
                    color='blue', linestyle='dashed', linewidth=3.5)

ax1.legend(handles=[line1], fontsize = 20)
plt.show()

# –ú–æ–¥–∞ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ.
dscrt_lst = np.random.randint(0,100,size = 1000)

fig = plt.figure(figsize=(24, 6))
ax1 = plt.subplot(121)
plt.hist(dscrt_lst, 100, alpha=0.8)
plt.show()
mode = stats.mode(dscrt_lst)
print(mode)

#–ö–≤–∞–Ω—Ç–∏–ª—å ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é.
# –ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, —Ç–æ –∫–≤–∞–Ω—Ç–∏–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–µ–º –∏–ª–∏ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–º.

print(np.percentile(gen_pop, 75))
print(stats.scoreatpercentile(gen_pop, 75))

df_box_plot = pd.DataFrame()
df_box_plot['gen_pop'] = gen_pop
df_box_plot['gen_pop_ln'] = gen_pop_ln

fig = plt.figure(figsize=(20, 10))
sns.boxplot(data=df_box_plot, orient="h")
plt.show()

# –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
# –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö:
# —Å—Ä–µ–¥–Ω–µ–µ - ùúá =1ùëÅ‚àëùëÅùëñ=1(ùë•ùëñ), –≥–¥–µ N - –æ–±—ä–µ–º –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏.

mean = np.mean(gen_pop)
print(mean)

# –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤—ã–±–æ—Ä–∫–æ–π –º–µ—Ä—ã –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—ã–±–æ—Ä–æ—á–Ω—ã–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Ü–µ–Ω–∫—É –º–µ—Ä—ã –º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ –≤—ã–±–æ—Ä–∫–µ.
# –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ - –ù–ï ùëã=1/ùëõ‚àëùëõ ùëñ=1 (ùë•ùëñ), –∑–¥–µ—Å—å n - –æ–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏.
n = 20
sample = np.random.choice(gen_pop, n, replace = False)
sample_mean = np.mean(sample)
print(sample_mean)

# –ì—Ä–∞–Ω–∏—Ü–∞–º–∏ —è—â–∏–∫–∞ —Å–ª—É–∂–∞—Ç –ø–µ—Ä–≤—ã–π –∏ —Ç—Ä–µ—Ç–∏–π –∫–≤–∞—Ä—Ç–∏–ª–∏ (25-–π –∏ 75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ),
# –ª–∏–Ω–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —è—â–∏–∫–∞ ‚Äî –º–µ–¥–∏–∞–Ω–∞ (50-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å).
# –ö–æ–Ω—Ü—ã —É—Å–æ–≤ ‚Äî –∫—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π –≤—ã–±–æ—Ä–∫–∏ (–±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤),
# –∏ –æ–Ω–∏ –º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏.
# –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ –¥–ª–∏–Ω—É ¬´—É—Å–æ–≤¬ª:
#
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±–æ—Ä–∫–µ (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—ã–±—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç);
# –†–∞–∑–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–≤–∞—Ä—Ç–∏–ª—è –∏ –ø–æ–ª—É—Ç–æ—Ä–∞ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π; —Å—É–º–º–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –∫–≤–∞—Ä—Ç–∏–ª—è –∏ –ø–æ–ª—É—Ç–æ—Ä–∞ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π.

# –ú–µ—Ä—ã —Ä–∞–∑–±—Ä–æ—Å–∞
#
# –î–ª—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:
#
# –¥–∏—Å–ø–µ—Ä—Å–∏—è -  ùúé2=1/ùëÅ ‚àëùëÅ ùëñ=1(ùë•ùëñ‚àíùúá)^2
#
# —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ -  ùúé= sqrt(1/ùëÅ ‚àëùëÅ ùëñ=1(ùë•ùëñ‚àíùúá)^2)

#–¥–∏—Å–ø–µ—Ä—Å–∏—è
var_ = np.var(gen_pop)
print(var_)
#—Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
std_ = np.std(gen_pop)
print(std_)

# –û—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:
#
# ùëÜ=sqrt(1/ùëõ‚àí1 ‚àëùëõ ùëñ=1(ùë•ùëñ‚àí –ù–ï ùëã)^2)
#
# –ü–æ –∏–Ω—Ç—É–∏—Ü–∏–∏ - —Ä–∞–∑–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—ã–±–æ—Ä–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç —Å—Ç–æ–ª—å –±–æ–ª—å—à–∏–º, –∫–∞–∫ –≤–æ –≤—Å–µ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏,
# –∏ –¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞ n, –∞ –Ω–∞ n ‚Äì 1 –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—é—â–µ–µ –∑–∞–Ω–∏–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.
std_sample = np.std(sample,
                    ddof = 1)
print(std_sample)

iterations = 1000
n = 20

std_sample_l = []
std_sample_l_corrected = []

for i in range(iterations):
    sample = np.random.choice(gen_pop, n, replace=False)
    std_sample = np.std(sample)
    std_sample_corrected = np.std(sample, ddof=1)

    std_sample_l.append(std_sample)
    std_sample_l_corrected.append(std_sample_corrected)


fig = plt.figure(figsize=(20, 10))

ax1 = plt.subplot(111)
plt.hist(std_sample_l, alpha=0.5, bins = 30)
plt.hist(std_sample_l_corrected,  alpha=0.5, bins = 30)

line1 = plt.axvline(std_, color='black', linestyle='dashed', linewidth=4.5,
                    label = 'std –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏')
line2 = plt.axvline(np.mean(std_sample_l), color='blue', linestyle='dashed', linewidth=4.5,
                    label = 'std –≤—ã–±–æ—Ä–∫–∏')
line3 = plt.axvline(np.mean(std_sample_l_corrected), color='orange', linestyle='dashed', linewidth=4.5,
                   label = 'std –≤—ã–±–æ—Ä–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ')

plt.legend() #–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
plt.show()

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ ‚Äî –≤–µ–ª–∏—á–∏–Ω–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∞—è
# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ –≤—ã–±–æ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–∞ n –∏–∑ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏.
#
# –∏—Å—Ç–∏–Ω–Ω–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - ùúéùë•¬Ø=ùúé/sqrt(ùëÅ)
# –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –ø–æ –≤—ã–±–æ—Ä–∫–µ - ùëÜùë•¬Ø=ùëÜ/sqrt(ùëõ)
n = 20
sample = np.random.choice(gen_pop, n, replace = False)
#–æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –ø–æ –≤—ã–±–æ—Ä–∫–µ
print(stats.sem(sample))

fig = plt.figure(figsize=(10, 5))
ax1 = plt.subplot(111)
plt.hist(gen_pop, 50, alpha=0.8)
line1 = plt.axvline(mean, label=('–°—Ä–µ–¥–Ω–µ–µ = '+ str(round(mean, 1))),
                    color='blue', linestyle='dashed', linewidth=3.5, alpha = 0.4)
ax1.legend(handles=[line1], fontsize = 15)
plt.show()


n = 100
for i in range(5):
    sample = np.random.choice(gen_pop, n, replace = False)
    sample_mean = np.mean(sample)
    sem = stats.sem(sample)
    fig = plt.figure(figsize=(8, 4))

    ax1 = plt.subplot(111)
    plt.hist(sample, 20, alpha=0.8)
    line1 = plt.axvline(sample_mean, label=('–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ = '+ str(round(sample_mean, 1))),
                        color='blue', linestyle='dashed', linewidth=3, alpha = 0.4)
    line2 = plt.axvline(mean, label=('–ò—Å—Ç–∏–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ = '+ str(round(mean, 1))),
                        color='orange', linestyle='dashed', linewidth=3, alpha = 0.4)
    line3 = plt.axvline(mean, label=('–í—ã–±–æ—Ä–æ—á–Ω–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ = '+ str(round(sem, 1))),
                        color='black', linestyle='dashed', linewidth=3, alpha = 0.0)
    ax1.legend(handles=[line1, line2, line3], fontsize = 10)
    plt.show()

# –ß–µ–º –±–æ–ª—å—à–µ –≤—ã–±–æ—Ä–∫–∞, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –æ—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —Ç–µ–º –º–µ–Ω—å—à–µ –µ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.
# –ß–µ–º –±–æ–ª—å—à–µ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏, —Ç–µ–º –±–æ–ª—å—à–µ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö, –ø–æ—ç—Ç–æ–º—É
# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏.

# –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ä–∞–∑–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö,
# ‚Äî –æ–Ω–∞ –ª–∏—à—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ.

# –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫
# –û—Ü–µ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ—Å–º–µ—â–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –µ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ –∏—Å—Ç–∏–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
#
# –ë–æ–ª–µ–µ —Å–ª–∞–±—ã–º —É—Å–ª–æ–≤–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è –∞—Å–∏–º–ø—Ç–æ—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å–º–µ—â–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
# –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å —Ä–æ—Å—Ç–æ–º –æ–±—ä–µ–º–∞ –≤—ã–±–æ—Ä–∫–∏.
#
# –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º:
iterations = 5000
n = 20

std_sample_l = []
std_sample_l_corrected = []

est = []
est_1 = []

for i in range(iterations):
    sample = np.random.choice(gen_pop, n, replace=False)
    std_sample = np.std(sample)
    std_sample_corrected = np.std(sample, ddof=1)

    std_sample_l.append(std_sample)
    std_sample_l_corrected.append(std_sample_corrected)

    if i % 20 == 0:
        est.append(np.abs(np.mean(std_sample_l) - std_))
        est_1.append(np.abs(np.mean(std_sample_l_corrected) - std_))
fig = plt.figure(figsize=(12, 6))
plt.plot(est)
plt.plot(est_1)
plt.show()
# –°–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äì –ø—Ä–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∫–∏ –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
est = []
for i in range(10,5000, 10):
    sample = np.mean(np.random.choice(gen_pop, i, replace = False))
    est.append(sample)
plt.figure(figsize=(14,8))
plt.plot(est, c='grey', alpha = 0.5)
plt.hlines(mean, 0, 500, color='blue', lw=2, label = '—Å—Ä–µ–¥–Ω–µ–µ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏')
plt.xlabel('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π * 10', size=12)
plt.legend()
plt.show()

#–ü—Ä–∏–º–µ—Ä –Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:
est = []
for i in range(10,5000, 10):
    sample = np.mean(np.random.choice(gen_pop, i, replace = False)) * (np.sqrt(i)/i) + 30
    est.append(sample)
plt.figure(figsize=(9,5))
plt.plot(est, c='grey', alpha = 0.5)
plt.hlines(mean, 0, 500, color='blue', lw=2, label = '—Å—Ä–µ–¥–Ω–µ–µ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏')
plt.xlabel('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π * 10', size=12)
plt.legend()
plt.show()

# –ù–µ—Å–º–µ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö –æ—Ü–µ–Ω–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç
# –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é.
#
# –û–ø—è—Ç—å –±—É–¥–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±–æ—Ä–∫–µ:
#
# ùúÉ1=1/ùëõ ‚àëùëõ ùëñ=1 (ùë•ùëñ)
# ùúÉ2=ùëÄùëí(ùë•ùëñ)
n = 20
est_1 = []
est_2 = []

for i in range(1000):
    est_1.append(np.mean(np.random.choice(gen_pop, n, replace=False)))
    est_2.append(np.median(np.random.choice(gen_pop, n, replace=False)))

df_box_plot_est = pd.DataFrame()
df_box_plot_est['est_1'] = est_1
df_box_plot_est['est_2'] = est_2

fig = plt.figure(figsize=(12, 6))
sns.boxplot(data=df_box_plot_est, orient="h", showmeans=True)
plt.show()
mean_1 = np.mean(est_1)
mean_2 = np.mean(est_2)

print(f'–°—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—ã–±–æ—Ä–∫–∞–º –æ—Ü–µ–Ω–∫–∏ 1 - {round(mean_1,1)}')
print(f'–°—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—ã–±–æ—Ä–∫–∞–º –æ—Ü–µ–Ω–∫–∏ 2 - {round(mean_2,1)}')

var_1 = np.var(est_1)
var_2 = np.var(est_2)

print(f'–î–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –≤—ã–±–æ—Ä–∫–∞–º –æ—Ü–µ–Ω–∫–∏ 1 - {round(var_1,1)}')
print(f'–î–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –≤—ã–±–æ—Ä–∫–∞–º –æ—Ü–µ–Ω–∫–∏ 2 - {round(var_2,1)}')

# –û–±–µ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã –∏ –Ω–µ—Å–º–µ—â–µ–Ω–Ω—ã–µ, –ø—Ä–∏ —ç—Ç–æ–º –æ—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑
# —Å—Ä–µ–¥–Ω–µ–µ —è–≤–ª—è–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –¥–∏—Å–ø–µ—Ä—Å–∏—è –ø–µ—Ä–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –º–µ–Ω—å—à–µ.
#
# –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —è–≤–ª—è—é—Ç—Å—è –Ω–µ—Å–º–µ—â–µ–Ω–Ω—ã–º–∏,
# —Ç–æ –≤—ã—á–∏—Å–ª—è—é—Ç –≤–µ–ª–∏—á–∏–Ω—É MSE (—Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É). –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∑—ã–≤–∞—é—Ç —Ç—É –æ—Ü–µ–Ω–∫—É,
# —É –∫–æ—Ç–æ—Ä–æ–π MSE –º–∏–Ω–∏–º–∞–ª—å–Ω–∞.
#
# ùëÄùëÜùê∏= (‚àëùëõ ùëñ=1 (ùúÉÃÇ‚àíùúÉ)^2 )/ùëõ
#
# –î–ª—è –Ω–µ—Å–º–µ—â–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ MSE —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π.

# –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è cdf –∏ pdf
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—è–¥ —Ñ—É–Ω–∫—Ü–∏–π:
#
# pdf - —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã;
# cdf - —ç—Ç–æ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏,
# –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å: ¬´–ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∂–µ—Ç—Å—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Ç–∞–∫–æ–º—É-—Ç–æ?¬ª.
fig = plt.figure(figsize=(14, 6))
x = np.linspace(gen_pop.min(), gen_pop.max(), 100)
mu = gen_pop.mean()
sigma = gen_pop.std()
y_pdf = stats.norm.pdf(x, mu, sigma)
y_cdf = stats.norm.cdf(x, mu, sigma)

plt.plot(x, y_cdf, label='cdf', color = 'r')
plt.legend()
plt.twinx()
plt.plot(x, y_pdf, label='pdf', color = 'b')
plt.legend()
plt.show()