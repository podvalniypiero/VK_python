# Область видимости LEGB
#              - иерархия, сначала посмотрит в локальной, потом в объемлющей, потом в глобальной, потом во встроенной
# 1) локальная - 4
# 2) глобальная - 2
# 3) встроенная - 1
# 4) объемлющая - 3 - ов когда работаем с f, внутри которой вложена еще f: вложенная f знает о переменных вне ее,
# но вне внешней f о переменных ничего не известно
# ограничить переменные и изолировать их внутри области видимости, изменять переменные из других более общих ОВ



# Изнутри функции видны переменные, которые были определены и внутри нее и снаружи. Переменные, определенные внутри – локальные, снаружи – глобальные.
# Снаружи функций не видны никакие переменные, определенные внутри них.
# Изнутри функции можно изменять значение переменных, которые определены в глобальной области видимости с помощью спецификатора global.
# Изнутри вложенной функции с помощью спецификатора nonlocal можно изменять значения переменных, которые были определены во внешней функции, но не находятся в глобальной области видимости.
a = 2
def f():
    # a = 1
    print(a)
if __name__ == '__main__':
    f()
    print(a) # здесь 1 не увидит, увидит 2


def f():
    a = 3
    def g():
        a = 33
        print(a) # 33
    g()
    print(a) # 3
if __name__ == '__main__':
    f()
    print(a) # 2

# global - поменять ОВ на глобальную
def f():
    global a
    a = 0
    def g():
        a = 33
        print(a)  # 33
    g()
    print(a)  #0

if __name__ == '__main__':
    f()
    print(a)  # здесь уже 0, тк global a = 0

# nonlocal - чтобы изменить переменную из объемлющей ОВ, нужно написать ключевое слово nonlocal
def f():
    a = 1
    def g():
        nonlocal a # модифицировали переменную из объемлющей ОВ
        a = 2
        print(a)  # 2
    g()
    print(a)  # 2, без nonlocal будет 1

if __name__ == '__main__':
    f()
    # print(a)
